<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jpa="http://www.springframework.org/schema/data/jpa"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.2.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
		http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa-1.3.xsd     
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.2.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd">
<!-- 配置组件扫描,扫描 指定com.wp.netctoss包下的组件-->
<context:component-scan 
	base-package="com.wp.netctoss"/>
	
<!-- 配置MVC注解扫描 (@RequestMapping)-->
<mvc:annotation-driven/>

<!-- 配置ViewResolver,,前端控制器主动地调用 -->
<!-- 映射到 /WEB_INF/hello.jsp-->
<bean class='org.springframework.web.servlet.view.InternalResourceViewResolver'>
	<property name="prefix" value="/WEB-INF/"></property>	
	<property name="suffix" value=".jsp"/>
</bean>


<!-- 读取properties文件 -->
<util:properties id="config" location="classpath:db.properties"/>
<!-- 配置连接池 -->
<bean id="ds" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
<property name="driverClassName" value="#{config.driver}"></property>
<property name="url" value="#{config.url}"/>
<property name="username" value="#{config.username}"/>
<property name="password" value="#{config.password}"></property>
</bean>

<!-- 配置拦截器 -->
<mvc:interceptors>
	<mvc:interceptor>
		<mvc:mapping path="/**"/>
		<mvc:exclude-mapping path="/toLogin.do"/>
		<mvc:exclude-mapping path="/login.do"/>
		<bean class="com.wp.netctoss.interceptors.SessionInterceptor"></bean>
	</mvc:interceptor>
</mvc:interceptors>

<!-- 配置jdbcTemplate 

<bean id="jt" 
	class="org.springframework.jdbc.core.JdbcTemplate">
<property name="dataSource" ref="ds"></property>
</bean>
-->

<!-- 配置SqlSessionFactoryBean -->
<!-- spring集成了mybatis,就不再需要mybatis的配置文件,而使用
	SqlsessionFactoryBean来代替Mybatis配置文件 -->
	
	<!-- 注入连接池,不再使用mybatis自带的连接池,而是使用spring管理的连接池 -->
<bean id="ssfb" class="org.mybatis.spring.SqlSessionFactoryBean">
	<property name="dataSource" ref="ds"></property>
	<!-- 映射文件的位置 -->
	<property name="mapperLocations" value="classpath:com/wp/netctoss/entity/*.xml"></property>
</bean>

<!-- 配置MapperScannerConfigurer -->
<!-- 
MapperScannerConfigurer负责扫描指定包下面的所有映射器(就是DAO),
然后生成符合这些映射器要求的对象.(其实就是调用SqlSession的GetMapper方法),
另外还会将这些方法添加到spring容器里面(默认的id是首字母小写之后的接口名,
如添加dao包下的EmpDAO接口,其默认对应的id="empDAO";
也可使用@Repository注解重新设置id值).
 -->
 <!-- MapperScannerConfigurer会进行组件扫描 -->
<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
	<!-- 指定Mapper映射器(其实就是就是DAO接口)所在包 -->
	<property name="basePackage" value="com.wp.netctoss.dao"></property>

<!-- 只扫描特定的接口 -->

<property name="annotationClass" value="com.wp.netctoss.annotations.MyBatisRepository"></property>	

</bean>

</beans>









